diff --git a/ROMFS/px4fmu_common/init.d-posix/rcS b/ROMFS/px4fmu_common/init.d-posix/rcS
index ddb9703828..59be1ee21e 100644
--- a/ROMFS/px4fmu_common/init.d-posix/rcS
+++ b/ROMFS/px4fmu_common/init.d-posix/rcS
@@ -314,7 +314,7 @@ then
 	uxrce_dds_port="$PX4_UXRCE_DDS_PORT"
 fi
 
-uxrce_dds_client start -t udp -h 127.0.0.1 -p $uxrce_dds_port $uxrce_dds_ns
+uxrce_dds_client start -t udp -h "${PX4_UXRCE_DDS_AG_IP:-127.0.0.1}" -p $uxrce_dds_port $uxrce_dds_ns
 
 if param greater -s MNT_MODE_IN -1
 then
diff --git a/Tools/upload_log.py b/Tools/upload_log.py
index a13f1b14b0..83a816a378 100755
--- a/Tools/upload_log.py
+++ b/Tools/upload_log.py
@@ -25,10 +25,6 @@ except ImportError as e:
     sys.exit(1)
 
 
-SERVER = 'https://logs.px4.io'
-#SERVER = 'http://localhost:5006' # for testing locally
-UPLOAD_URL = SERVER+'/upload'
-
 quiet = False
 
 def ask_value(text, default=None):
@@ -60,6 +56,8 @@ def main():
     parser = ArgumentParser(description=__doc__)
     parser.add_argument('--quiet', '-q', dest='quiet', action='store_true', default=False,
             help='Quiet mode: do not ask for values which were not provided as parameters')
+    parser.add_argument('--server', dest='server', type=str, default='https://logs.px4.io',
+                    help='Server URL (default: https://logs.px4.io)')
     parser.add_argument("--description", dest="description", type=str,
                       help="Log description", default=None)
     parser.add_argument("--feedback", dest="feedback", type=str,
@@ -99,6 +97,9 @@ def main():
     else:
         email = args.email
 
+    SERVER = args.server
+    UPLOAD_URL = SERVER + '/upload'
+
     payload = {'type': args.type, 'description': description,
                'feedback': feedback, 'email': email, 'source': args.source}
 
diff --git a/src/modules/navigator/navigator_main.cpp b/src/modules/navigator/navigator_main.cpp
index dc53c6928d..0f85104f56 100644
--- a/src/modules/navigator/navigator_main.cpp
+++ b/src/modules/navigator/navigator_main.cpp
@@ -648,6 +648,11 @@ void Navigator::run()
 
 				_vtol_takeoff.setTransitionAltitudeAbsolute(cmd.param7);
 
+				float epsilon = 1e-6f;
+				if (std::fabs(cmd.param2 - 3.0f) < epsilon) { // Specified transition direction
+					_vtol_takeoff.setTransitionDirection(cmd.param4);
+				}
+
 				// after the transition the vehicle will establish on a loiter at this position
 				_vtol_takeoff.setLoiterLocation(matrix::Vector2d(cmd.param5, cmd.param6));
 
diff --git a/src/modules/navigator/vtol_takeoff.cpp b/src/modules/navigator/vtol_takeoff.cpp
index 503a0279f9..a7eda4a1d0 100644
--- a/src/modules/navigator/vtol_takeoff.cpp
+++ b/src/modules/navigator/vtol_takeoff.cpp
@@ -71,8 +71,12 @@ VtolTakeoff::on_active()
 				position_setpoint_triplet_s *pos_sp_triplet = _navigator->get_position_setpoint_triplet();
 
 				_mission_item.nav_cmd = NAV_CMD_WAYPOINT;
-				_mission_item.yaw = wrap_pi(get_bearing_to_next_waypoint(_mission_item.lat,
-							    _mission_item.lon, _loiter_location(0), _loiter_location(1)));
+				if (std::isnan(_transition_direction_deg)) {
+					_mission_item.yaw = wrap_pi(get_bearing_to_next_waypoint(_navigator->get_home_position()->lat,
+					_navigator->get_home_position()->lon, _loiter_location(0), _loiter_location(1)));
+				} else {
+					_mission_item.yaw = wrap_pi(math::radians(_transition_direction_deg));
+				}
 				_mission_item.force_heading = true;
 				mission_item_to_position_setpoint(_mission_item, &pos_sp_triplet->current);
 				pos_sp_triplet->current.cruising_speed = -1.f;
diff --git a/src/modules/navigator/vtol_takeoff.h b/src/modules/navigator/vtol_takeoff.h
index 3ba32ce7df..162209893d 100644
--- a/src/modules/navigator/vtol_takeoff.h
+++ b/src/modules/navigator/vtol_takeoff.h
@@ -55,6 +55,7 @@ public:
 	void on_active() override;
 
 	void setTransitionAltitudeAbsolute(const float alt_amsl) {_transition_alt_amsl = alt_amsl; }
+	void setTransitionDirection(const float tran_bear) {_transition_direction_deg = tran_bear; }
 
 	void setLoiterLocation(matrix::Vector2d loiter_location) { _loiter_location = loiter_location; }
 	void setLoiterHeight(const float height_m) { _loiter_height = height_m; }
@@ -73,6 +74,7 @@ private:
 	float _takeoff_alt_msl{0.f};
 	matrix::Vector2d _loiter_location;
 	float _loiter_height{0};
+	float _transition_direction_deg{NAN};
 
 	DEFINE_PARAMETERS(
 		(ParamFloat<px4::params::VTO_LOITER_ALT>) _param_loiter_alt
